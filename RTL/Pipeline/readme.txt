Pipeline RISC-V CPU

ver1.0:
·Support instruction:
	TYPE R: ADD SUB SLL SLT SLTU XOR SRL SRA AND
			ADDI SLLI SLTI SLTUI XORI SRLI SRAI ANDI
	TYPE S: SB SH SW
	TYPE L: LB LH LW LBU LHU
	TYPE J: JAL JALR
	TYPE B: BEQ BNE BLT BGE BLTU BGEU
	TYPE U: AUIPC LUI
·Data path is set from "ex.v" to "decoder.v" for RAW data hazard
·Control unit:
	Hold logic is set for load hazard
	The instruction can be set as NOPE in control hazard
	Module "ctrl.v" is reserved for branch prediction

ver 1.1:
·Branch prediction supported:
	Use a buffer whose depth is one to store the pc of branch instruction and target
	If the pc is stored in the buffer, ctrl unit will predict to jump

ver 1.2:
·Branch prediction improved:
	Use two bit to construct BHT(branch history table)
	Only one pc supported to be saved
·The structure of memory is edited:
	before:
		[7:0] memory[0:255] 
		data_out <= {memory[addr+3],memory[addr+2],memory[addr+1],memory[addr]}
	now:
		[31:0] memory[0:255]
		data_out <= memory[addr>>2]

ver 1.3.0:
·RV64I Supported
·Support instruction:
	TYPE R: ADD SUB SLL SLT SLTU XOR SRL SRA AND
			ADDI SLLI SLTI SLTUI XORI SRLI SRAI ANDI
	TYPE S: SB SH SW
	TYPE L: LB LH LW LBU LHU
	TYPE J: JAL JALR
	TYPE B: BEQ BNE BLT BGE BLTU BGEU
	TYPE U: AUIPC LUI
	TYPE RW: ADDW SUBW SLLW SRLW SRAW
	TYPE IW: ADDIW SLLIW SRLIW SRAIW
	TYPE L: LWU LD
	TYPE S: SD
	
ver 1.3.6:
·AXI Supported:
	if stage and mem stage use the same interface
	use AXI4 Bus
	access the RAM generated by ip core in vivado

ver 1.3.7:
·Fetch except & Decoder except supported:
	Fetch except: pc is too small or too large or not aligned
	Decoder except: illegal instruction

ver 1.3.8:
·CSR decoder supported

ver 1.4.0:
·AXI interconnect:
	Arbitration supported: load > if
	Be set on busy when writing or reading slave(RAM)
	Mux for the write port and read port
	Arready will be low when if arbitration loss
·AXI translate interface:
	Interface between AXI interconnect matrix self-define port from instruction-fetch & memory-access
	Provide stall signal for core
	Provide the bus-idle signal for core
·More pipeline ctrl logic in core:
	Hold code is fixed to `HOLD_CODE_EX, which may be replaced by 1-bit hold signal from "ctrl.v" in next version
	Hold the pc when if arbitration loss
	Flush the instruction after load to avoid the repeat of instruction
·Improved bypass logic:
	The bypass result will come from the input of write-back pipeline registers
	The mem stage will be syncronized with ex stage by the mux
	If pipeline hold, new data are not allowed to be written in general registers

ver 1.4.1:
·AXI improve:
	Unaligned memory access(store/load) supported

ver 1.4.2
·Timer AXI interface:
	Timer interface supported in AXI interconnect
	When timer interface act, the access to RAM will not continue
·Fence_I instruction supported 